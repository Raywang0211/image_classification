from _typeshed import Incomplete

class MyModel:
    output_class: Incomplete
    batch_size: Incomplete
    learningrate: Incomplete
    writer: Incomplete
    training_device: str
    iterate_time: int
    data_split_rate: float
    train_size: int
    val_size: int
    def __init__(self, output_class, batch_size: int = 100, lr: float = 0.01) -> None: ...
    model: Incomplete
    def load_model(self) -> None: ...
    def model_freeze(self) -> None: ...
    def load_single_img(self, image_path): ...
    train_loader: Incomplete
    val_loader: Incomplete
    def load_dataset(self, root_dir_train) -> None: ...
    def load_testdata(self, root_dir_test) -> None: ...
    loss_fn: Incomplete
    optimizer: Incomplete
    scheduler: Incomplete
    def init_loss_optimizer(self) -> None: ...
    def train(self, dataloader, model, loss_fn, optimizer): ...
    def validation(self, dataloader, model, loss_fn): ...
    def inference_test(self, dataloader, model, loss_fn): ...
    def save_model(self, model_name) -> None: ...
    acc_pre: int
    def start_train(self, train_dataset, epoch, model_name) -> None: ...
    def start_inference(self, model_path, test_Dataset) -> None: ...
    def start_inference_single(self, test_image, model_path) -> None: ...
